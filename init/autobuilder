#! /bin/bash
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Mathieu Souchaud <souchaud@phimeca.com>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="OpenTURNS autobuilder"
NAME=autobuilder
DAEMON="/root/autobuilder/$NAME"
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
PIDFILE_WEBHOOK_HANDLER=/var/run/webhook_handler.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=yes

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  if [ -a $PIDFILE ]; then
    #log_daemon_msg "$NAME seems already started" "$NAME"
    return 2
  fi

  stdbuf -i0 -o0 -e0 /root/autobuilder/webhook_handler.py 110 > /var/log/webhook_handler.log 2>&1 &
  RET=$?
  if [ $RET -eq 0 ]; then
    echo $! > $PIDFILE_WEBHOOK_HANDLER
  fi

  $DAEMON &

  RET=$?
  if [ $RET -eq 0 ]; then
    echo $! > $PIDFILE
  fi

  return $RET
}

#
# Function that stops the daemon/service
#
do_stop()
{
  RET=1
  if [ -a $PIDFILE ]; then
    PID=`cat $PIDFILE_WEBHOOK_HANDLER`
    rm $PIDFILE_WEBHOOK_HANDLER
    kill $PID

    PID=`cat $PIDFILE`
    rm $PIDFILE
    #echo "kill $PID"
    kill $PID
    RET=$?
  fi

  return $RET
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	echo "can't reload $NAME"
	return 1
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
